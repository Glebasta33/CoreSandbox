package c5_lambdas

/**
 * ## 5.3. Отложенные операции над коллекциями: последовательности (Sequences).
 */
fun main() {
    val people = listOf(Person("Alice", 27), Person("Bob", 31), Person("John", 27))
    people.filter { it.age > 30 }.map(Person::name).let { println(it) } // Bob
    /**
     * При работе с коллекций функции filter и map немедленно создают промежуточные коллекции.
     * Последовательности (sequences) позволяют избежать создания временных промежуточных объектов коллекций.
     * Это особенно полезно при большом количестве элементов в коллекции.
     */
    people.asSequence()
        .map(Person::name) // <- промежуточный оператор
        .filter { it.startsWith("A") } // <- промежуточный оператор
        .toList() // <- терминальный оператор
    /**
     * Элементы последовательности вычисляются лениво. Выполнение промежуточных операций откладывается,
     * терминальный оператор заставляет выполниться все отложенные вычисления.
     *
     * Важно!
     * В коллекциях: все элементы полностью проходят через оператор, прежде чем перейти к следующему.
     * В последовательностях: каждый элемент по отдельности проходит все операторы.
     */

    // Создание последовательности:
    val naturalNumbers = generateSequence(0) { it + 1 }
    val numbersTo100 = naturalNumbers.takeWhile { it <= 100 } //<- промежуточный оператор
    println(numbersTo100.sum()) // 5050 <- sum - терминальный оператор, запускающий вызов промежуточного
}