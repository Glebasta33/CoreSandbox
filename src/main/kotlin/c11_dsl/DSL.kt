package c11_dsl

/**
 * # Глава 11. Конструирование DSL (Domain Specific Languages).
 * ## 11.1. От API к DSL.
 *
 * Цель разработчиков - достичь максимальной читаемости и выразительности кода.
 * Это цели невозможно достичь, сосредоточив всё внимание только на отдельных классах.
 * Большая часть кода в классах взаимодействует с другими классами, поэтому важно уделять внимание программным интерфейсам классов.
 * Создание выразительных и удобных API - прерогатива не только создателей библиотек, но и каждого разработчика: каждый класс
 * подобно библиотекам предоставляет другим классам взаимодействовать с ним.
 *
 * В идеале API класса должен ясным:
 * - читателям кода должно быть ясно, что он делает.
 * - код должен быть простым и не перегруженным избыточными синтаксическими конструкциями.
 *
 * ## Понятие предметно-ориентированного языка.
 * Понятие DSL появилось почти одновременно с понятием ЯП как такового.
 * Можно выделить ЯП:
 * - общего назначения - для решения практически любых задач с помощью компьютера
 * - предметно-ориентированные (DSL) - ориентированные на решение задач из конкретной предметной области
 * и не обладающие средствами для решения любых других задач (Примеры: SQL, Regex).
 *
 * Особенности DSL:
 * - В DSL-языках увеличивается эффективность в достижении цели за счёт ограничения технических возможностей: на DSL можно
 * более кратко выразить предметную операцию, чем на языке общего назначения.
 * - DSL склоняются к декларативному стилю, тогда как языки общего назначения - к императивному.
 * Императивный язык - описывает последовательность действий, которые требуется выполнить для завершения операции.
 * Декларативный язык - описывает желаемый результат, оставляя детали его получения на усмотрения движка, который интерпретирует этот код.
 * - DSL - имеют существенный недостаток: код на DSL трудно встраивается в приложения, написанные на языках общего назначения.
 *
 * ## Внутренние предметно-ориентированные языки.
 * В противоположность внешним DSL (SQL, ...), внутренние DSL - это часть программы, написанной на языке общего назначения,
 * с таким же синтаксисом.
 * Мы не можем вставить SQL код в программу. Обычно лучшее, на что можно рассчитывать - поместить SQL-запрос в строку.
 * Внутренний DSL позволяет, например, писать SQL запросы на языке Kotlin.
 *
 * ## Структура предметно-ориентированных языков.
 * Не существует чётких границ между DSL и обычным API, и часто критерием становится субъективное мнение.
 * Но часто DSL обладают структурой и грамматикой.
 *
 * Типичный API состоит из набора методов. Использующий их клиент вызывает методы по одному, при этом последовательность вызовов не имеет предопределённой структуры,
 * а контекст выполняемых операций не сохраняется между вызовами. Такие API иногда называются командными API.
 *
 * Вызовы методов в DSL образуют более крупные структуры, определяемые грамматикой DSL.
 * Наличие грамматики (как структура предложения в естественных языках: подлежащее, сказуемое) - вот что позволяет называть внутренний DSL языком.
 *
 * Одно из преимуществ наличия структуры в DSL - она позволяет использовать общий контекст в нескольких вызовах функций, не воссоздавая его заново в каждом вызове.
 *
 */
fun main() {

}